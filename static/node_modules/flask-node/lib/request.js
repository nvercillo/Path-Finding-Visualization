"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const querystring_1 = require("querystring");
const formidable_1 = require("formidable");
/**
 * Flask Request class
 */
class Request {
    /**
     * Create Request instance
     * @param req
     * @private
     */
    constructor(req) {
        let parser = (this.parser = url_1.parse(req.url));
        this.req = req;
        this.method = req.method.toLowerCase();
        this.pathname = parser.pathname;
        this.formParse = new formidable_1.IncomingForm();
    }
    /**
     * The method can get request querystring value.
     *
     * If param `name` is undefined, will return querystring object.
     *
     * @param name
     */
    args(name) {
        let args = querystring_1.parse(this.parser.query);
        if (!name) {
            return args;
        }
        else {
            return args[name] || null;
        }
    }
    /**
     * The method will return cookie value.
     *
     * If param `name` is undefined, will return cookie object.
     *
     * @param name
     */
    cookies(name) {
        let cookieStr = this.headers('cookie') || '';
        cookieStr = cookieStr.split('; ').join('&');
        let cookies = querystring_1.parse(cookieStr);
        if (!name) {
            return cookies;
        }
        else {
            return cookies[name] || null;
        }
    }
    /**
     * The method can get file from requests.
     *
     * **Must execute in parse callback**.
     *
     * @param name
     * @example
     * ```
     * req.parse(err => {
     *  if (!err) req.files('filename')
     * })
     * ```
     */
    files(name) {
        return this.formParseFiles[name];
    }
    /**
     * The method can parse form data from POST or PUT requests.
     *
     * **Must execute in parse callback**.
     *
     * @param name
     * @example
     * ```
     * req.parse(err => {
     *  if (!err) req.form('name')
     * })
     * ```
     */
    form(name) {
        if (/^post$|^put$/.test(this.method)) {
            return this.formParseFields[name];
        }
        else {
            return this.args(name);
        }
    }
    /**
     * The method will return request headers.
     *
     * @param name
     */
    headers(name) {
        let lc = name.toLowerCase();
        let headers = this.req.headers;
        switch (lc) {
            case 'referer':
            case 'referrer':
                return headers.referrer || headers.referer;
            default:
                return headers[lc];
        }
    }
    /**
     * The method is parse HTTP body data.
     *
     * @param parseOk - Triggered when request parsing is complete
     */
    parse(parseOk) {
        if (/^post$|^put$/.test(this.method)) {
            this.formParse.parse(this.req, (err, fields, files) => {
                if (err) {
                    parseOk(err);
                }
                else {
                    this.formParseFiles = files;
                    this.formParseFields = fields;
                    parseOk(null);
                }
            });
        }
        else {
            parseOk(null);
        }
    }
    /**
     * The method will return request value from form and args.
     *
     * If the form and requestquery have same key, will return form data.
     *
     * **Must execute in parse callback**.
     *
     * @param name
     * @example
     * ```javascript
     * req.parse(err => {
     *      if (!err) req.values('name');
     * })
     * ```
     */
    values(name) {
        return this.form(name) || this.args(name) || null;
    }
}
exports.Request = Request;
//# sourceMappingURL=request.js.map