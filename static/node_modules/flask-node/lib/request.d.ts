/// <reference types="node" />
import { IncomingMessage } from 'http';
import { File } from 'formidable';
/**
 * Flask Request class
 */
export declare class Request {
    private req;
    private parser;
    private formParse;
    private formParseFiles;
    private formParseFields;
    /**
     * Request pathname
     */
    pathname: string;
    /**
     * Request method
     */
    method: string;
    /**
     * Create Request instance
     * @param req
     * @private
     */
    constructor(req: IncomingMessage);
    /**
     * The method can get request querystring value.
     *
     * If param `name` is undefined, will return querystring object.
     *
     * @param name
     */
    args(name?: string): Object | string;
    /**
     * The method will return cookie value.
     *
     * If param `name` is undefined, will return cookie object.
     *
     * @param name
     */
    cookies(name?: string): string | Object;
    /**
     * The method can get file from requests.
     *
     * **Must execute in parse callback**.
     *
     * @param name
     * @example
     * ```
     * req.parse(err => {
     *  if (!err) req.files('filename')
     * })
     * ```
     */
    files(name: string): File;
    /**
     * The method can parse form data from POST or PUT requests.
     *
     * **Must execute in parse callback**.
     *
     * @param name
     * @example
     * ```
     * req.parse(err => {
     *  if (!err) req.form('name')
     * })
     * ```
     */
    form(name: string): Object;
    /**
     * The method will return request headers.
     *
     * @param name
     */
    headers(name: string): string;
    /**
     * The method is parse HTTP body data.
     *
     * @param parseOk - Triggered when request parsing is complete
     */
    parse(parseOk: (err: Error | null) => void): void;
    /**
     * The method will return request value from form and args.
     *
     * If the form and requestquery have same key, will return form data.
     *
     * **Must execute in parse callback**.
     *
     * @param name
     * @example
     * ```javascript
     * req.parse(err => {
     *      if (!err) req.values('name');
     * })
     * ```
     */
    values(name: string): string | Object | null;
}
