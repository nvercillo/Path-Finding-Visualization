"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const route_1 = require("./route");
/**
 * Save all url <-> endpoint map
 */
const endpoints = {};
/**
 * All route array list
 * @private
 */
exports.routeList = [];
/**
 * inster sourt
 * @param array
 * @private
 */
const _insertSort = function _insertSort(array) {
    let length = array.length, j, temp;
    for (let i = 1; i < length; i++) {
        j = i;
        temp = array[i];
        while (j > 0 && array[j - 1].weight > temp.weight) {
            array[j] = array[j - 1];
            j--;
        }
        array[j] = temp;
    }
};
/**
 * According the request to select the appropriate handler
 * @param req
 * @param res
 * @private
 */
function handleRouter(req, res) {
    let i = 0, len = exports.routeList.length;
    for (; i < len; i++) {
        let result = exports.routeList[i].match(req.pathname);
        if (result) {
            let endpointName = exports.routeList[i].endpoint;
            req.parse((err) => {
                if (err !== null) {
                    res.end(err.message, 500);
                }
                else {
                    endpoints[endpointName].call(null, req, res, result);
                }
            });
            break;
        }
    }
    if (i === len) {
        res.end('404 Not Found', 404);
    }
}
exports.handleRouter = handleRouter;
/**
 * Router class
 */
class Router {
    /**
     * Create a router instance
     * @param prefix - the prefix string will add to URL rule before
     */
    constructor(prefix = '') {
        this.prefix = prefix;
    }
    /**
     * A method that is used to register a view function for a given URL rule.
     * @param url - the URL rule as string
     * @param methods - the HTTP method list
     * @param endpoint - the view function
     */
    add(url, methods, endpoint) {
        if (endpoint === undefined) {
            endpoint = methods;
            methods = ['get'];
        }
        const name = endpoint.name;
        if (!name)
            throw TypeError(`handle function Can't be an anonymous function`);
        if (this.prefix !== '') {
            url = '/' + this.prefix + url;
        }
        exports.routeList.push(new route_1.Route(url, methods, name));
        endpoints[name] = endpoint;
        _insertSort(exports.routeList);
    }
}
exports.Router = Router;
//# sourceMappingURL=index.js.map